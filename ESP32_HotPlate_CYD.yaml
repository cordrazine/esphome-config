# ESP32 controlled hotplate
# filename: ESP32_Hotplate.yaml
#
# 
### Declarations ####
substitutions:
# Identity
  devicename: hotplate
  upper_devicename: HotPlate

# Device
  platform: ESP32
  board: nodemcu-32s
  #  board_flash_mode: dout

# Network
  static_ip: 192.168.20.124
  gateway: 192.168.20.1
  subnet: 255.255.255.0

# General
  logger_level: DEBUG

esp32:
   board: $board
   framework:
    type: arduino

### General configuration ####
esphome:
  name: ${devicename}
  # platform: $platform
 
wifi:
  ssid: !secret wifi_not_ssid
  password: !secret wifi_not_psw
  manual_ip:
    static_ip: $static_ip
    gateway: $gateway
    subnet: $subnet
  # needed for hidden SSID
  fast_connect: true
  
  ap:
    # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: ${upper_devicename} AP
    password: !secret wifi_hotspot_psw

# captive_portal:

# Enable Home Assistant API
api:

# Enable logging
logger:
  level: $logger_level

ota:
  - platform: esphome
    password: !secret ota_psw

binary_sensor:
  - platform: status
    name: ${upper_devicename} Status
    id: device_statusid

climate:
  - platform: pid
    id: pid_controller
    name: "${upper_devicename} PID Controller"
    sensor: temperature_sensor_1
    default_target_temperature: 21°C
    heat_output: heater_relay
    cool_output: cooler
    control_parameters:
      kp: 0.06867
      ki: 0.00052
      kd: 2.26955
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 0.5°C       # deadband within +/-0.5°C of target_temperature
      threshold_low: -0.5°C
    visual:
      min_temperature: 21
      max_temperature: 250
      temperature_step:
        target_temperature: 0.5
        current_temperature: 0.1

button:
  - platform: template
    name: "${upper_devicename} PID Autotune"
    on_press:
      - climate.pid.autotune: pid_controller

time:
  - platform: homeassistant
    id: esptime

text_sensor:
  - <<: !include common/versionTextSensor.yaml
  - platform: wifi_info
    ip_address:
      name: ${upper_devicename} IP
      id: device_ip_address
    ssid:
      name: ${upper_devicename} SSID
      id: device_ssid

  - platform: template
    # name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    internal: True

switch:
  - <<: !include common/restartSwitch.yaml
  # - <<: !include common/shutdownSwitch.yaml
spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39
  - id: temperature_sensor
    miso_pin: GPIO19
    clk_pin: GPIO18

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "fonts/Helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "fonts/Helvetica.ttf"
    id: helvetica_36
    size: 36
  - file: "fonts/Helvetica.ttf"
    id: helvetica_24
    size: 24
  - file: "fonts/Helvetica.ttf"
    id: helvetica_12
    size: 12

image:
  - file: "images/power-off-button.png"
    id: on_off_button
  - file: "images/radio-station.png"
    id: radio

sensor:
  - platform: max6675
    spi_id: temperature_sensor
    name: ${upper_devicename} Temperature
    id: temperature_sensor_1
    cs_pin: GPIO5
    update_interval: 1s

  - platform: max6675
    spi_id: temperature_sensor
    name: ${upper_devicename} Temperature 2
    id: temperature_sensor_2
    cs_pin: GPIO23
    update_interval: 1s

  - platform: wifi_signal
    name: ${upper_devicename} WiFi Signal Sensor
    update_interval: 15s
    id: device_wifi_signal

  # - platform: pid
  #   name: "${upper_devicename} PID Result"
  #   type: RESULT
  # - platform: pid
  #   name: "${upper_devicename} PID KP"
  #   type: KP
  # - platform: pid
  #   name: "${upper_devicename} PID KI"
  #   type: KI
  # - platform: pid
  #   name: "${upper_devicename} PID KD"
  #   type: KD

  - platform: uptime
    # name: Uptime Sensor
    internal: True
    id: uptime_sensor
    update_interval: 1s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                ("Uptime ") +
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
  
display:
  - platform: ili9xxx
    model: ILI9341
    spi_id: lcd
    cs_pin: 15
    dc_pin: 2
    invert_colors: false
    lambda: |-
      int hs = it.get_width() / 2; // Horizontal Spacing = text data horizontal center point
      int hq = it.get_width() / 4; // text data horizontal center for two vertical lines
      int vs = it.get_height() / 8; // Vertical Center = text data vertical center point = how many lines
      int line_gap = 21; // distance of line from center of data text
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
      
      it.strftime(5, 5, id(helvetica_12), id(my_white), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());
      it.print(hs, 5, id(helvetica_12), id(my_blue), TextAlign::TOP_CENTER, "${devicename}"); //print title  
      
      if (id(device_statusid).state) {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }
      it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text
      it.printf(5, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_LEFT, "%s", id(uptime_human).state.c_str());
      it.printf(hs, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_CENTER, "%.0fdBm", id(device_wifi_signal).state);
      it.printf(it.get_width()-5, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_RIGHT, "%s", id(device_ip_address).state.c_str());
      it.image(hq - 25, 50, id(on_off_button));
      it.image(3*hq - 25, 50, id(radio));

      it.line(0, vs * 3, it.get_width(), vs * 3, id(my_blue));
      it.print(hs, vs * 3 + line_gap, id(helvetica_24), id(my_white), TextAlign::CENTER, "BME280 sensor");
      it.line(0, vs * 4, it.get_width(), vs * 4, id(my_blue));
      it.print(hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "Temperature:");
      it.printf(3*hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.1f°C", id(device_wifi_signal).state);
      it.print(hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "Pressure:");
      it.printf(3*hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.0fhPa", id(device_wifi_signal).state);

# Define pins for backlight display and back LED1
output:
  - platform: ledc
    pin: GPIO21
    id: former_led_pin
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

  - platform: sigma_delta_output
    update_interval: 1s
    id: heater_relay
    pin: GPIO27
  - platform: slow_pwm
    id: cooler
    pin: GPIO22
    period: 10s

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: former_led_pin
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: LED
    red: output_red
    id: led
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

touchscreen:
  platform: xpt2046
  spi_id: touch
  cs_pin: 33
  interrupt_pin: 36
  update_interval: 50ms
  # report_interval: 1s
  threshold: 400
  calibration:
    x_min: 280
    x_max: 3860
    y_min: 340
    y_max: 3860
  transform:
    mirror_x: true
    mirror_y: false
    swap_xy: false
